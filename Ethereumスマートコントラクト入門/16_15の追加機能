//15の追加機能1
//ブラックリスト化

//ブラックリストに記載されたアドレスは入出金不可にする
//オーナーのみブラックリストへの追加・削除を可能にする
//オーナーはアドレスを識別することでコントラクト作成時のアドレスを設定する

pragma solidity ^0.4.20;

//ブラックリスト機能付き仮想通貨
contract OreOreCoin{
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    //ブラックリスト管理用の変数とブラックリストへの追加・削除権限を持つアドレスを追加する。1以上がブラックリスト対象で、0以下をブラックリストの対象外とする
    mapping(address => int8) public blackList; //ブラックリスト
    address public owner; //オーナーアドレス
}

//修飾子
//modifierはメソッドを実行する前に動作状態をチェックしメソッドの実行を制限することができる。オーナーアドレスのみが実行できるようにした。
modifier onlyOwner() {if (msg.sender != owner) throw; _;}

//イベント通知
event Transfer(address indexed from, address indexed to, uint256 value);
event Blacklisted(address indexed target);
event RejectedPaymentToBlacklistedAddr(address indexed from, address indexed to, uint256 value);

//コンストラクタ
function OreOreCoin(uint256 _supply, string _name, string _symbol, uint8 _decimals){
    balanceOf[msg.sender] = _supply;
    name = _name;
    symbol = _symbol;
    decimals = _decimals;
    totalSupply = _supply;
    owner = msg.sender; //オーナーのアドレスをセット
}

//アドレスをブラックリストに登録する
function blacklisting(address _addr) onlyOwner{
    blackList[_addr] = 1;
    Blacklisted(_addr);
}

//アドレスをブラックリストから削除する
function deleteFromBlacklist(address _addr) onlyOwner{
    blackList[_addr] = -1;
    DeleteFromBlacklist(_addr);
}

//送金
function transfer(address _to, uint256 _value){
    //不正送金をチェック
    if(balanceOf[msg.sender] < _value) throw;
    if(balanceOf[_to] + _value < balanceOf[_to]) throw;

    //ブラックリストに存在するアドレスには入出金不可
    if (blackList[msg.sender] > 0){
        RejectedPaymentFromBlacklistedAddr(msg.sender,_to,_value)
    }else if(blackList[_to] > 0){
        RejectedPaymentToBlacklistedAddr(msg.sender, _to, _value);
    }else{
        balanceOf[msg.sender] -= _value;
        balanceOf[_to] += _value;

        Transfer(msg.sender, _to, _value)
    }
}
