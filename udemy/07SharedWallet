pragma solidity ^0.4.0;

contract owned{
    address owner;

    modifier onlyowner(){
        if(msg.sender == owner){
            _;
        }
    }

    function owned(){
        owner = msg.sender;
    }
}

contract mortal is owned{
    function kill(){
        if(msg.sender == owner)
            selfdestruct(owner);
    }
}

contract MyWallet is mortal{
    event receivedFunds(address indexed _from, uint256 _amount);

    struct Proposal{
        address _from;
        address _to;
        uint256 _value;
        string _reason;
        bool sent;
    }

    uint proposal_counter;

    mapping(uint => Proposal) m_proposals;

    function spentMoneyOn(address _to, uint256 _value, string _reason){
        if(owner == msg.sender){
            bool sent = _to.send(_value);
            if(!sent){
                throw;
            }
        }else{
            proposal_counter++;
            m_proposals[proposal_counter] = Proposal(msg.sender, _to, _value, _reason, false);
        }
    }

    function() payable{
        if(msg.value > 0){
            receivedFunds(msg.sender, msg.value)
        }
    }
}
